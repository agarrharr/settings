set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
Bundle 'gmarik/vundle'
" File tree
Bundle 'scrooloose/nerdtree'
" Expands abbreviations similar to emmet
Bundle 'mattn/emmet-vim'
" Fuzzy searching for opening files
Bundle 'kien/ctrlp.vim'
" Adds search capability on google, bing, SO, etc.
Bundle 'arecarn/frisk'
" Code linter
Bundle 'scrooloose/syntastic'
" Autocompletion
Bundle 'Valloric/YouCompleteMe'
" Code analysis engine for javascript to make syntastic smarter
Bundle 'marijnh/tern_for_vim'
" Fix javascript indentation
Bundle 'vim-scripts/JavaScript-Indent'
" Quoting/parenthesizing made simple
Bundle 'tpope/vim-surround'
" For editing gpg encrypted files which I store my mutt passwords in
Bundle 'jamessan/vim-gnupg'
" Closes html/xml tags after typing </
Bundle 'docunext/closetag.vim'
" Git commands inside vim
Bundle 'tpope/vim-fugitive'
" Plugin for working with Mustache and Handlebars templates
Bundle 'mustache/vim-mustache-handlebars'
" Statusline customization
Bundle "csexton/trailertrash.vim"
" Automatic indentation
Bundle "tpope/vim-sleuth"
" Interact with tmux from vim
Bundle "benmills/vimux"
" Diplays tags in a pane
Bundle "majutsushi/tagbar"
" Show a git diff n the gutter
Bundle "airblade/vim-gitgutter"
" JavaScript Context Coloring
Bundle "bigfish/vim-js-context-coloring"

" Set leader key to comma
let mapleader = ","

" Source the vimrc file after saving it
if has("autocmd")
  autocmd bufwritepost vimrc source $MYVIMRC
endif

" Powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
set laststatus=2

" Map open vimrc
nnoremap <leader>ev :tabnew $MYVIMRC<cr>
nnoremap <leader>et :tabnew ~/dotfiles/tmux.conf<cr>
nnoremap <leader>ez :tabnew ~/dotfiles/zshrc<cr>
nnoremap <leader>em :tabnew ~/dotfiles/mutt/muttrc<cr>
nnoremap <leader>eg :tabnew ~/dotfiles/gitconfig<cr>

syntax on
set number
set relativenumber
set encoding=utf-8
set t_Co=256
" Set to dark theme at night and light theme during the day
if strftime("%H") > 18
  set background=dark
elseif strftime("%H") > 6
  set background=light
else
  set background=dark
endif
let g:solarized_termcolors=256
colorscheme solarized
" Turn on search highlighting
set hlsearch
set undofile
" I don't think I need to be vi compatible
set nocompatible
" I don't need this (plus there's a possible security problem)
set modelines=0
" Don't add newline to end of file
set fileformats+=dos

" Set mappings panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" Mapping for opening splits and moving into it
nnoremap <leader>sv <C-w>v<C-w>l
nnoremap <leader>ss <C-w>s<C-w>j

" Turn off arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Make the backspace work in terminal
set backspace=indent,eol,start

" Enable better indentation.
set autoindent smartindent
set smarttab
" set tabstop=2 softtabstop=2 shiftwidth=2 expandtab

" Code folding for javascript
syntax region foldBraces start=/{/ end=/}/ transparent fold keepend extend
setlocal foldmethod=syntax
setlocal foldlevel=99

" Copy to system clipboard when you yank
if $TMUX == ''
  set clipboard+=unnamed
endif

" Invisible Characters
" Shortcut to toggle invisible characters
nnoremap <leader>i :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
" Change color to gray
hi NonText ctermfg=7 guifg=gray
" Show this character when the line wraps
set showbreak=↪

" Map deleting a line in insert mode
:inoremap <C-d> <esc>ddi
" Toggle the case of the previous word in insert mode
:inoremap <C-t> <esc>bg~wea

" Remove all trailing whitespace in a file
nnoremap <leader>w :%s/\s\+$//<cr>:let @/=''<CR>

" Plugins

" NERDTree
nnoremap <leader>n :NERDTree<CR>

" fugitive
" Automatically remove fugitive buffers from the buffer list
autocmd BufReadPost fugitive://* set bufhidden=delete

" vimux
" Set tmux pane percentage
let g:VimuxHeight = "30"
" Split tmux pane horizontally
let g:VimuxOrientation = "h"
" Prompt for a command to run
map <leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <leader>vl :VimuxRunLastCommand<CR>
" Move into the tmux runner pane created by `VimuxRunCommand` and enter copy pmode (scroll mode)
map <leader>vi :VimuxInspectRunner<CR>
" Close tmux runner opened by VimuxRunCommand
map <leader>vq :VimuxCloseRunner<CR>
" Stop command running in the runner pane
map <leader>vs :VimuxInterruptRunner<CR>
" Clear the runner pane
map <leader>vc: VimuxClearRunnerHistory<CR>

" tagbar
let tagbar_ctags_bin = "/usr/local/bin/ctags"
map <leader>m :TagbarToggle<CR>

" syntastic
let g:syntastic_html_tidy_ignore_errors = ['warning: <div> proprietary attribute "data-role"']
